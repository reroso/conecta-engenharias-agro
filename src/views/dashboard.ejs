<div class="page-header">
    <h1 class="page-title">Dashboard</h1>
    <p class="breadcrumb">Vis√£o geral do sistema</p>
</div>

<!-- Dashboard Statistics -->
<div class="dashboard-stats">
    <div class="stat-card">
        <span class="stat-number" id="totalPlantacoes">-</span>
        <div class="stat-label">Planta√ß√µes Ativas</div>
    </div>
    
    <div class="stat-card">
        <span class="stat-number" id="recomendacoesPendentes">-</span>
        <div class="stat-label">Recomenda√ß√µes Pendentes</div>
    </div>
    
    <div class="stat-card">
        <span class="stat-number" id="alertasAtivos">-</span>
        <div class="stat-label">Alertas Ativos</div>
    </div>
    
    <div class="stat-card">
        <span class="stat-number" id="atualizacoesHoje">-</span>
        <div class="stat-label">Atualiza√ß√µes Hoje</div>
    </div>
</div>

<div class="dashboard-content">
    <!-- Main Content Area -->
    <div class="dashboard-main">
        <!-- Recent Recommendations -->
        <div class="card">
            <div class="card-header">
                <h3>Recomenda√ß√µes Recentes</h3>
                <a href="/recomendacao" class="btn btn-outline btn-sm">Ver Todas</a>
            </div>
            <div class="card-body">
                <div id="recentRecommendations">
                    <div class="loading">Carregando recomenda√ß√µes...</div>
                </div>
            </div>
        </div>

        <!-- Climate Overview -->
        <div class="card">
            <div class="card-header">
                <h3>Resumo Clim√°tico</h3>
                <button onclick="updateAllClimateData()" class="btn btn-primary btn-sm">
                    Atualizar Dados
                </button>
            </div>
            <div class="card-body">
                <div id="climateOverview">
                    <div class="loading">Carregando dados clim√°ticos...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sidebar -->
    <div class="dashboard-sidebar">
        <!-- Quick Actions -->
        <div class="card">
            <div class="card-header">
                <h3>A√ß√µes R√°pidas</h3>
            </div>
            <div class="card-body">
                <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                    <a href="/plantacao/nova" class="btn btn-primary">Nova Planta√ß√£o</a>
                    <button onclick="generateAllRecommendations()" class="btn btn-success">
                        Gerar Recomenda√ß√µes
                    </button>
                    <a href="/clima" class="btn btn-info">Ver Dados Clim√°ticos</a>
                </div>
            </div>
        </div>

        <!-- Recommendations Chart -->
        <div class="card">
            <div class="card-header">
                <h3>Status Recomenda√ß√µes</h3>
            </div>
            <div class="card-body">
                <div class="chart-container" style="height: 250px;">
                    <canvas id="recomendacoesChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Weather Alerts -->
        <div class="card">
            <div class="card-header">
                <h3>‚ö° Alertas Clim√°ticos</h3>
            </div>
            <div class="card-body">
                <div id="weatherAlerts">
                    <div class="text-muted text-center">Nenhum alerta ativo</div>
                </div>
            </div>
        </div>
        
        <!-- NOVA: Previs√£o e Alertas Preditivos -->
        <div class="card">
            <div class="card-header">
                <h3>üîÆ Previs√£o e Riscos Futuros</h3>
                <div class="card-actions">
                    <button onclick="atualizarPrevisao()" class="btn btn-secondary btn-sm">
                        üîÑ Atualizar Previs√£o
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div id="previsaoContainer">
                    <div class="loading">Carregando previs√£o...</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Dashboard specific JavaScript
document.addEventListener('DOMContentLoaded', function() {
    loadDashboardData();
    loadRecentRecommendations();
    loadClimateOverview();
    loadRecommendationsChart();
    loadWeatherAlerts();
    loadPrevisao(); // NOVA fun√ß√£o
});

async function loadDashboardData() {
    try {
        const response = await fetch('/api/recomendacoes/dashboard');
        const data = await response.json();
        
        // Update statistics
        document.getElementById('recomendacoesPendentes').textContent = 
            data.estatisticas.porStatus.find(s => s._id === 'pendente')?.count || 0;
            
        document.getElementById('alertasAtivos').textContent = data.urgentes.length;
        
        // Load planta√ß√µes count
        const plantacoesResponse = await fetch('/api/plantacoes');
        const plantacoes = await plantacoesResponse.json();
        document.getElementById('totalPlantacoes').textContent = plantacoes.length;
        
        // Simular atualiza√ß√µes hoje (seria calculado no backend)
        document.getElementById('atualizacoesHoje').textContent = Math.floor(Math.random() * 10) + 1;
        
    } catch (error) {
        console.error('Erro ao carregar dados do dashboard:', error);
    }
}

async function loadRecentRecommendations() {
    try {
        const response = await fetch('/api/recomendacoes/dashboard');
        const data = await response.json();
        
        const container = document.getElementById('recentRecommendations');
        
        if (data.urgentes.length === 0) {
            container.innerHTML = '<div class="text-muted text-center">Nenhuma recomenda√ß√£o urgente</div>';
            return;
        }
        
        const html = data.urgentes.slice(0, 5).map(rec => `
            <div class="recommendation-card priority-${rec.prioridade}" data-recomendacao="${rec.id}">
                <div class="card-body" style="padding: 1rem;">
                    <div class="recommendation-header">
                        <h5 class="recommendation-title">${rec.titulo}</h5>
                        <span class="badge badge-${getPriorityClass(rec.prioridade)}">${rec.prioridade.toUpperCase()}</span>
                    </div>
                    <div class="recommendation-meta">
                        <strong>Planta√ß√£o:</strong> ${rec.plantacao} | 
                        <strong>Prazo:</strong> ${formatDate(rec.dataLimite)} 
                        (${rec.diasRestantes.dias} dias)
                    </div>
                    <div class="recommendation-actions">
                        <button onclick="markRecommendationApplied('${rec.id}')" class="btn btn-success btn-sm">
                            Marcar como Aplicada
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
        
    } catch (error) {
        console.error('Erro ao carregar recomenda√ß√µes:', error);
        document.getElementById('recentRecommendations').innerHTML = 
            '<div class="text-danger">Erro ao carregar recomenda√ß√µes</div>';
    }
}

async function loadClimateOverview() {
    try {
        // Buscar planta√ß√µes do usu√°rio
        const plantacoesResponse = await fetch('/api/plantacoes');
        const plantacoes = await plantacoesResponse.json();
        
        if (plantacoes.length === 0) {
            document.getElementById('climateOverview').innerHTML = 
                '<div class="text-muted">Nenhuma planta√ß√£o cadastrada</div>';
            return;
        }
        
        // Buscar resumo clim√°tico da primeira planta√ß√£o (exemplo)
        const resumoResponse = await fetch(`/api/clima/resumo/${plantacoes[0]._id}`);
        const resumo = await resumoResponse.json();
        
        if (!resumo.dados) {
            document.getElementById('climateOverview').innerHTML = 
                '<div class="text-muted">Nenhum dado clim√°tico dispon√≠vel</div>';
            return;
        }
        
        const html = `
            <div class="grid grid-3">
                <div class="text-center">
                    <div style="font-size: 2rem; color: #ff6b35;">
                        ${resumo.temperatura.media ? resumo.temperatura.media.toFixed(1) : '-'}¬∞C
                    </div>
                    <div class="text-muted">Temperatura M√©dia</div>
                </div>
                <div class="text-center">
                    <div style="font-size: 2rem; color: #17a2b8;">
                        ${resumo.precipitacao.total.toFixed(1)}mm
                    </div>
                    <div class="text-muted">Chuva (7 dias)</div>
                </div>
                <div class="text-center">
                    <div style="font-size: 2rem; color: #28a745;">
                        ${resumo.umidade.media ? resumo.umidade.media.toFixed(0) : '-'}%
                    </div>
                    <div class="text-muted">Umidade M√©dia</div>
                </div>
            </div>
            <div class="mt-2">
                <small class="text-muted">
                    Dados dos √∫ltimos ${resumo.periodo.diasComDados} dias | 
                    √öltima atualiza√ß√£o: ${formatDate(resumo.dadoMaisRecente.data)}
                </small>
            </div>
        `;
        
        document.getElementById('climateOverview').innerHTML = html;
        
    } catch (error) {
        console.error('Erro ao carregar resumo clim√°tico:', error);
        document.getElementById('climateOverview').innerHTML = 
            '<div class="text-danger">Erro ao carregar dados clim√°ticos</div>';
    }
}

function loadWeatherAlerts() {
    // Simular alertas clim√°ticos (seria implementado com dados reais)
    const alerts = [
        { type: 'warning', message: 'Baixa umidade prevista para os pr√≥ximos dias' },
        { type: 'info', message: 'Chuvas moderadas esperadas na pr√≥xima semana' }
    ];
    
    const container = document.getElementById('weatherAlerts');
    
    if (alerts.length === 0) {
        container.innerHTML = '<div class="text-muted text-center">Nenhum alerta ativo</div>';
        return;
    }
    
    const html = alerts.map(alert => `
        <div class="alert alert-${alert.type}" style="padding: 0.75rem; margin-bottom: 0.5rem;">
            ${alert.message}
        </div>
    `).join('');
    
    container.innerHTML = html;
}

// Implementar fun√ß√£o que estava faltando
async function loadRecommendationsChart() {
    try {
        const response = await fetch('/api/recomendacoes/dashboard');
        const data = await response.json();
        
        if (!data.estatisticas) {
            console.warn('Dados de estat√≠sticas n√£o encontrados');
            return;
        }
        
        const ctx = document.getElementById('recomendacoesChart');
        if (!ctx) {
            console.warn('Canvas recomendacoesChart n√£o encontrado');
            return;
        }
        
        // Destruir gr√°fico anterior se existir
        if (window.recomendacoesChartInstance) {
            window.recomendacoesChartInstance.destroy();
        }
        
        // Preparar dados para o gr√°fico
        const statusData = data.estatisticas.porStatus || [];
        const labels = [];
        const dataValues = [];
        const backgroundColors = [];
        
        statusData.forEach(item => {
            labels.push(item._id === 'pendente' ? 'Pendentes' : 
                       item._id === 'concluida' ? 'Conclu√≠das' : 
                       item._id === 'vencida' ? 'Vencidas' : item._id);
            dataValues.push(item.count);
            
            // Cores para cada status
            if (item._id === 'pendente') backgroundColors.push('#ffc107');
            else if (item._id === 'concluida') backgroundColors.push('#28a745');
            else if (item._id === 'vencida') backgroundColors.push('#dc3545');
            else backgroundColors.push('#6c757d');
        });
        
        // Se n√£o h√° dados, mostrar gr√°fico vazio
        if (dataValues.length === 0) {
            labels.push('Nenhuma recomenda√ß√£o');
            dataValues.push(1);
            backgroundColors.push('#dee2e6');
        }
        
        // Criar gr√°fico
        window.recomendacoesChartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: dataValues,
                    backgroundColor: backgroundColors,
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed || 0;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                },
                animation: {
                    animateRotate: true,
                    duration: 1000
                }
            }
        });
        
    } catch (error) {
        console.error('Erro ao carregar gr√°fico de recomenda√ß√µes:', error);
        
        // Mostrar mensagem de erro no lugar do gr√°fico
        const container = document.getElementById('recomendacoesChart').parentElement;
        container.innerHTML = '<div class="text-danger text-center p-3">Erro ao carregar dados do gr√°fico</div>';
    }
}

function updateAllClimateData() {
    window.agroApp.showLoading('Atualizando dados clim√°ticos...');
    
    fetch('/api/clima/atualizar', { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            window.agroApp.hideLoading();
            window.agroApp.showToast(data.message, 'success');
            loadClimateOverview();
        })
        .catch(error => {
            window.agroApp.hideLoading();
            window.agroApp.showToast('Erro ao atualizar dados clim√°ticos', 'error');
        });
}

function generateAllRecommendations() {
    window.agroApp.showLoading('Gerando recomenda√ß√µes...');
    
    fetch('/api/recomendacoes/gerar', { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            window.agroApp.hideLoading();
            window.agroApp.showToast(data.message, 'success');
            loadRecentRecommendations();
            loadDashboardData();
        })
        .catch(error => {
            window.agroApp.hideLoading();
            window.agroApp.showToast('Erro ao gerar recomenda√ß√µes', 'error');
        });
}

// Fun√ß√£o global para marcar recomenda√ß√£o como aplicada
window.markRecommendationApplied = function(recomendacaoId, observacoes = '') {
    fetch(`/api/recomendacoes/${recomendacaoId}/aplicada`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ observacoes })
    })
    .then(response => response.json())
    .then(data => {
        window.agroApp.showToast(data.message, 'success');
        loadRecentRecommendations();
        loadDashboardData();
    })
    .catch(error => {
        window.agroApp.showToast('Erro ao marcar recomenda√ß√£o como aplicada', 'error');
    });
};

function getPriorityClass(priority) {
    const classes = {
        'baixa': 'success',
        'media': 'warning',
        'alta': 'danger',
        'urgente': 'danger'
    };
    return classes[priority] || 'secondary';
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('pt-BR');
}

// NOVA: Fun√ß√µes para previs√£o do tempo e alertas preditivos
async function loadPrevisao() {
    try {
        console.log('üîç Carregando previs√£o...');
        
        // Buscar primeira planta√ß√£o do usu√°rio para previs√£o
        const plantacoesResponse = await fetch('/api/plantacoes');
        
        if (!plantacoesResponse.ok) {
            throw new Error(`Erro ao buscar planta√ß√µes: ${plantacoesResponse.status}`);
        }
        
        const plantacoes = await plantacoesResponse.json();
        console.log('üå± Planta√ß√µes encontradas:', plantacoes.length);
        
        if (plantacoes.length === 0) {
            document.getElementById('previsaoContainer').innerHTML = 
                '<div class="text-muted text-center">Cadastre uma planta√ß√£o para ver a previs√£o do tempo</div>';
            return;
        }
        
        const primeiraPlantacao = plantacoes[0];
        console.log('üéØ Buscando previs√£o para:', primeiraPlantacao.nome);
        
        // Buscar previs√£o para a primeira planta√ß√£o
        const response = await fetch(`/api/previsao/${primeiraPlantacao._id}`);
        
        if (!response.ok) {
            throw new Error(`Erro na API de previs√£o: ${response.status} - ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('üîÆ Dados de previs√£o recebidos:', data);
        
        renderPrevisao(data);
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar previs√£o:', error);
        document.getElementById('previsaoContainer').innerHTML = 
            `<div class="text-danger text-center">
                <div>Erro ao carregar previs√£o do tempo</div>
                <small class="text-muted">${error.message}</small>
            </div>`;
    }
}

function renderPrevisao(data) {
    const container = document.getElementById('previsaoContainer');
    
    if (!data.previsao || data.previsao.length === 0) {
        container.innerHTML = '<div class="text-muted text-center">Previs√£o n√£o dispon√≠vel</div>';
        return;
    }
    
    // Resumo dos alertas
    const resumoHtml = `
        <div class="row mb-3">
            <div class="col-md-8">
                <h5>${data.plantacao.nome} - ${data.plantacao.variedade}</h5>
                <small class="text-muted">${data.plantacao.localizacao.cidade}, ${data.plantacao.localizacao.estado}</small>
            </div>
            <div class="col-md-4 text-end">
                <span class="badge badge-info">${data.resumo.totalAlertas} alertas</span>
                ${data.resumo.alertasUrgentes > 0 ? `<span class="badge badge-danger">${data.resumo.alertasUrgentes} urgentes</span>` : ''}
            </div>
        </div>
    `;
    
    // Alertas priorit√°rios
    let alertasHtml = '';
    if (data.alertas.length > 0) {
        alertasHtml = `
            <div class="alertas-preditivos mb-3">
                <h6>üö® Alertas Detectados:</h6>
                ${data.alertas.slice(0, 3).map(alerta => `
                    <div class="alert alert-${getPriorityAlertClass(alerta.prioridade)} mb-2" style="padding: 0.75rem;">
                        <strong>${alerta.titulo}</strong><br>
                        <small>${alerta.descricao}</small><br>
                        <em>A√ß√£o: ${alerta.acaoRecomendada.substring(0, 100)}...</em>
                    </div>
                `).join('')}
                ${data.alertas.length > 3 ? `<small class="text-muted">E mais ${data.alertas.length - 3} alertas...</small>` : ''}
            </div>
        `;
    }
    
    // Previs√£o dos pr√≥ximos dias
    const previsaoHtml = `
        <div class="previsao-5dias">
            <h6>üìÖ Previs√£o para os Pr√≥ximos 5 Dias:</h6>
            <div class="row">
                ${data.previsao.map((dia, index) => `
                    <div class="col">
                        <div class="dia-previsao text-center">
                            <div class="data">${formatarDataPrevisao(dia.data, index)}</div>
                            <div class="temperatura">
                                <span class="temp-max">${Math.round(dia.temperatura.maxima)}¬∞</span>
                                <span class="temp-min text-muted">${Math.round(dia.temperatura.minima)}¬∞</span>
                            </div>
                            <div class="precipitacao">
                                ${dia.precipitacao > 0 ? `üíß ${dia.precipitacao}mm` : '‚òÄÔ∏è'}
                            </div>
                            <div class="umidade text-muted">
                                <small>${Math.round(dia.umidade)}%</small>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
    
    container.innerHTML = resumoHtml + alertasHtml + previsaoHtml;
}

function getPriorityAlertClass(prioridade) {
    const classes = {
        'urgente': 'danger',
        'alta': 'warning',
        'media': 'info',
        'baixa': 'secondary'
    };
    return classes[prioridade] || 'secondary';
}

function formatarDataPrevisao(dataString, index) {
    if (index === 0) return 'Hoje';
    if (index === 1) return 'Amanh√£';
    
    const data = new Date(dataString);
    const dias = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b'];
    return dias[data.getDay()];
}

async function atualizarPrevisao() {
    console.log('üîÑ Iniciando atualiza√ß√£o de previs√£o...');
    
    if (!window.agroApp || !window.agroApp.showLoading) {
        console.warn('‚ö†Ô∏è agroApp n√£o dispon√≠vel, continuando sem loading...');
    } else {
        window.agroApp.showLoading('Atualizando previs√£o...');
    }
    
    try {
        // Gerar novas recomenda√ß√µes preditivas
        console.log('üì° Chamando API de recomenda√ß√µes preditivas...');
        
        const response = await fetch('/api/recomendacoes/gerar-preditivas', { 
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({})
        });
        
        console.log('üìä Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Erro ${response.status}: ${errorText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Resultado:', result);
        
        // Mostrar sucesso
        if (window.agroApp && window.agroApp.showToast) {
            window.agroApp.showToast(result.message, 'success');
        } else {
            alert(result.message);
        }
        
        // Recarregar dados
        console.log('üîÑ Recarregando dados...');
        loadPrevisao(); // Recarregar previs√£o
        loadDashboardData(); // Recarregar dashboard
        
    } catch (error) {
        console.error('‚ùå Erro ao atualizar previs√£o:', error);
        
        const errorMsg = 'Erro ao atualizar previs√£o: ' + error.message;
        if (window.agroApp && window.agroApp.showToast) {
            window.agroApp.showToast(errorMsg, 'error');
        } else {
            alert(errorMsg);
        }
    } finally {
        if (window.agroApp && window.agroApp.hideLoading) {
            window.agroApp.hideLoading();
        }
        console.log('üèÅ Atualiza√ß√£o finalizada');
    }
}
</script>

<style>
.dia-previsao {
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    padding: 0.75rem 0.5rem;
    margin-bottom: 0.5rem;
    background: #f8f9fa;
}

.temperatura {
    font-weight: bold;
    margin: 0.25rem 0;
}

.temp-max {
    color: #dc3545;
}

.temp-min {
    color: #6c757d;
    margin-left: 0.25rem;
}

.precipitacao {
    margin: 0.25rem 0;
    font-size: 0.9rem;
}

.alertas-preditivos .alert {
    border-left: 4px solid;
}

.card-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
</style>