<div class="page-header">
    <h1 class="page-title">Nova Planta√ß√£o</h1>
    <p class="breadcrumb">Cadastre uma nova planta√ß√£o</p>
</div>

<div class="card">
    <div class="card-header">
        <h3>Informa√ß√µes da Planta√ß√£o</h3>
    </div>
    <div class="card-body">
        <form id="novaPlantacaoForm">
            <div class="form-row">
                <div class="form-group">
                    <label for="nome" class="form-label">Nome da Planta√ß√£o</label>
                    <input type="text" id="nome" name="nome" class="form-input" required 
                           placeholder="Ex: Caf√© Fazenda Sul">
                </div>
                
                <div class="form-group">
                    <label for="especie" class="form-label">Cultura *</label>
                    <select id="especie" name="especie" class="form-select" required readonly>
                        <option value="cafe" selected>Caf√©</option>
                    </select>
                    <small class="form-text text-muted">Este sistema √© especializado em cafeicultura</small>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="variedade_cafe" class="form-label">Variedade do Caf√© *</label>
                    <select id="variedade_cafe" name="variedade_cafe" class="form-select" required>
                        <option value="">Selecione a variedade</option>
                        <option value="mundo_novo">Mundo Novo (Ar√°bica)</option>
                        <option value="catuai">Catua√≠ (Ar√°bica)</option>
                        <option value="bourbon">Bourbon (Ar√°bica)</option>
                        <option value="acaia">Acai√° (Ar√°bica)</option>
                        <option value="conilon">Conilon (Robusta)</option>
                    </select>
                    <small class="form-text text-muted">Selecione a variedade espec√≠fica de caf√© cultivada</small>
                </div>
                
                <div class="form-group">
                    <label for="fase_fenologica" class="form-label">Fase Fenol√≥gica Atual *</label>
                    <select id="fase_fenologica" name="fase_fenologica" class="form-select" required>
                        <option value="">Selecione a fase atual</option>
                        <option value="repouso">Repouso (Mai-Ago)</option>
                        <option value="brotacao">Brota√ß√£o (Set)</option>
                        <option value="floracao">Flora√ß√£o (Out-Dez)</option>
                        <option value="granacao">Grana√ß√£o (Jan-Abr)</option>
                        <option value="maturacao">Matura√ß√£o (Mai-Jul)</option>
                    </select>
                    <small class="form-text text-muted">Fase atual do desenvolvimento da planta</small>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="variedade" class="form-label">Observa√ß√µes da Variedade</label>
                    <input type="text" id="variedade" name="variedade" class="form-input" readonly
                           placeholder="Informa√ß√µes ser√£o preenchidas automaticamente">
                    <small class="form-text text-muted">Caracter√≠sticas espec√≠ficas da variedade selecionada</small>
                </div>
                
                <div class="form-group">
                    <label for="area" class="form-label">√Årea (hectares)</label>
                    <input type="number" id="area" name="area" class="form-input" min="0" step="0.1" required 
                           placeholder="Ex: 10.5">
                </div>
            </div>
            
                <div class="form-row">
                    <div class="form-group">
                        <label for="latitude" class="form-label">Latitude</label>
                        <input type="number" id="latitude" name="latitude" class="form-input" 
                               step="0.000001" min="-90" max="90" required
                               placeholder="Ex: -23.5505">
                    </div>
                    
                    <div class="form-group">
                        <label for="longitude" class="form-label">Longitude</label>
                        <input type="number" id="longitude" name="longitude" class="form-input" 
                               step="0.000001" min="-180" max="180" required
                               placeholder="Ex: -46.6333">
                    </div>
                </div>
                
                <div class="form-group">
                    <div class="location-buttons">
                        <button type="button" onclick="buscarEnderecoPorCoordenadas()" class="btn btn-info btn-sm">
                            üîç Buscar Cidade/Estado
                        </button>
                    </div>
                    <small class="text-muted" style="display: block; margin-top: 0.5rem;">
                        <strong>üìç Usar Minha Localiza√ß√£o:</strong> Obt√©m automaticamente suas coordenadas, cidade e estado<br>
                        <strong>üîç Buscar Cidade/Estado:</strong> Digite as coordenadas manualmente e busque a localiza√ß√£o
                    </small>
                </div>            <div class="form-row">
                <div class="form-group">
                    <label for="cidade" class="form-label">Cidade</label>
                    <input type="text" id="cidade" name="cidade" class="form-input" required 
                           placeholder="Ex: S√£o Paulo">
                </div>
                
                <div class="form-group">
                    <label for="estado" class="form-label">Estado</label>
                    <select id="estado" name="estado" class="form-select" required>
                        <option value="">Selecione o estado</option>
                        <option value="AC">Acre</option>
                        <option value="AL">Alagoas</option>
                        <option value="AP">Amap√°</option>
                        <option value="AM">Amazonas</option>
                        <option value="BA">Bahia</option>
                        <option value="CE">Cear√°</option>
                        <option value="DF">Distrito Federal</option>
                        <option value="ES">Esp√≠rito Santo</option>
                        <option value="GO">Goi√°s</option>
                        <option value="MA">Maranh√£o</option>
                        <option value="MT">Mato Grosso</option>
                        <option value="MS">Mato Grosso do Sul</option>
                        <option value="MG">Minas Gerais</option>
                        <option value="PA">Par√°</option>
                        <option value="PB">Para√≠ba</option>
                        <option value="PR">Paran√°</option>
                        <option value="PE">Pernambuco</option>
                        <option value="PI">Piau√≠</option>
                        <option value="RJ">Rio de Janeiro</option>
                        <option value="RN">Rio Grande do Norte</option>
                        <option value="RS">Rio Grande do Sul</option>
                        <option value="RO">Rond√¥nia</option>
                        <option value="RR">Roraima</option>
                        <option value="SC">Santa Catarina</option>
                        <option value="SP">S√£o Paulo</option>
                        <option value="SE">Sergipe</option>
                        <option value="TO">Tocantins</option>
                    </select>
                </div>
            </div>
            
            <!-- Se√ß√£o de Dados do Solo -->
            <div class="card mt-4">
                <div class="card-header">
                    <h4>üìä Informa√ß√µes do Solo</h4>
                    <small class="text-muted">Dados b√°sicos para an√°lise agron√¥mica</small>
                </div>
                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="ph_solo" class="form-label">pH do Solo *</label>
                            <input type="number" id="ph_solo" name="ph_solo" class="form-input" 
                                   min="3.0" max="9.0" step="0.1" required
                                   placeholder="Ex: 5.8">
                            <small class="form-text text-muted">Valor entre 3.0 e 9.0 (ideal para caf√©: 5.0-6.5)</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="tipo_solo" class="form-label">Tipo de Solo *</label>
                            <select id="tipo_solo" name="tipo_solo" class="form-select" required>
                                <option value="">Selecione o tipo</option>
                                <option value="arenoso">Arenoso (drena r√°pido)</option>
                                <option value="medio">M√©dio (franco)</option>
                                <option value="argiloso">Argiloso (ret√©m √°gua)</option>
                            </select>
                            <small class="form-text text-muted">Textura predominante do solo</small>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="data_plantio" class="form-label">Data de Plantio *</label>
                            <input type="date" id="data_plantio" name="data_plantio" class="form-input" required>
                            <small class="form-text text-muted">Para calcular idade da planta√ß√£o</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="ultima_adubacao" class="form-label">√öltima Aduba√ß√£o</label>
                            <input type="date" id="ultima_adubacao" name="ultima_adubacao" class="form-input">
                            <small class="form-text text-muted">Data da √∫ltima aplica√ß√£o de fertilizante (opcional)</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label for="observacoes" class="form-label">Observa√ß√µes (opcional)</label>
                <textarea id="observacoes" name="observacoes" class="form-input" rows="3" 
                          placeholder="Informa√ß√µes adicionais sobre a planta√ß√£o..."></textarea>
            </div>
            
            <div class="form-actions">
                <button type="button" onclick="history.back()" class="btn btn-secondary">Cancelar</button>
                <button type="submit" class="btn btn-primary">Cadastrar Planta√ß√£o</button>
            </div>
        </form>
    </div>
</div>

<script>
// Informa√ß√µes das variedades de caf√©
const variedadesCafe = {
    "mundo_novo": "Ar√°bica - Temp. ideal: 18-23¬∞C - N√£o tolera excesso de calor",
    "catuai": "Ar√°bica - Temp. ideal: 19-24¬∞C - Boa adapta√ß√£o a diferentes solos", 
    "bourbon": "Ar√°bica - Temp. ideal: 18-22¬∞C - Mais sens√≠vel a pragas",
    "acaia": "Ar√°bica - Temp. ideal: 20-25¬∞C - Melhor em regi√µes do Cerrado",
    "conilon": "Robusta - Temp. ideal: 22-30¬∞C - N√£o tolera frio abaixo de 18¬∞C"
};

// Atualizar informa√ß√µes da variedade
document.getElementById('variedade_cafe').addEventListener('change', function() {
    const variedadeSelecionada = this.value;
    const campoObservacoes = document.getElementById('variedade');
    
    if (variedadeSelecionada && variedadesCafe[variedadeSelecionada]) {
        campoObservacoes.value = variedadesCafe[variedadeSelecionada];
    } else {
        campoObservacoes.value = '';
    }
});

// Detectar fase fenol√≥gica automaticamente baseada na data atual
function detectarFaseAtual() {
    const agora = new Date();
    const mes = agora.getMonth(); // 0-11
    
    if (mes >= 4 && mes <= 7) return 'repouso'; // Mai-Ago
    if (mes === 8) return 'brotacao'; // Set
    if (mes >= 9 && mes <= 11) return 'floracao'; // Out-Dez
    if (mes >= 0 && mes <= 3) return 'granacao'; // Jan-Abr
    if (mes === 4 || mes === 6) return 'maturacao'; // Mai, Jul
    
    return 'repouso';
}

// Pr√©-selecionar fase fenol√≥gica atual
document.addEventListener('DOMContentLoaded', function() {
    const faseAtual = detectarFaseAtual();
    const selectFase = document.getElementById('fase_fenologica');
    selectFase.value = faseAtual;
});

document.getElementById('novaPlantacaoForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    // Converter n√∫meros
    data.area = parseFloat(data.area);
    data.latitude = parseFloat(data.latitude);
    data.longitude = parseFloat(data.longitude);
    
    try {
        window.agroApp.showLoading('Cadastrando planta√ß√£o...');
        
        const response = await fetch('/api/plantacoes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        window.agroApp.hideLoading();
        
        if (response.ok) {
            window.agroApp.showToast('Planta√ß√£o cadastrada com sucesso!', 'success');
            setTimeout(() => {
                window.location.href = '/plantacao';
            }, 1500);
        } else {
            window.agroApp.showToast(result.error || 'Erro ao cadastrar planta√ß√£o', 'error');
        }
        
    } catch (error) {
        window.agroApp.hideLoading();
        window.agroApp.showToast('Erro ao cadastrar planta√ß√£o', 'error');
        console.error('Erro:', error);
    }
});

// Buscar localiza√ß√£o automaticamente se o navegador suportar
if (navigator.geolocation) {
    const getLocationBtn = document.createElement('button');
    getLocationBtn.type = 'button';
    getLocationBtn.className = 'btn btn-outline btn-sm';
    getLocationBtn.textContent = 'üìç Usar Minha Localiza√ß√£o';
    
    getLocationBtn.addEventListener('click', function() {
        window.agroApp.showLoading('Obtendo localiza√ß√£o...');
        
        navigator.geolocation.getCurrentPosition(
            async function(position) {
                try {
                    // Preencher coordenadas
                    document.getElementById('latitude').value = position.coords.latitude.toFixed(6);
                    document.getElementById('longitude').value = position.coords.longitude.toFixed(6);
                    
                    // Buscar informa√ß√µes de cidade e estado usando geocodifica√ß√£o reversa
                    await buscarCidadeEstado(position.coords.latitude, position.coords.longitude);
                    
                    window.agroApp.hideLoading();
                    window.agroApp.showToast('Localiza√ß√£o e endere√ßo obtidos com sucesso!', 'success');
                } catch (error) {
                    window.agroApp.hideLoading();
                    window.agroApp.showToast('Localiza√ß√£o obtida, mas n√£o foi poss√≠vel determinar cidade/estado', 'warning');
                    console.error('Erro ao buscar endere√ßo:', error);
                }
            },
            function(error) {
                window.agroApp.hideLoading();
                let errorMessage = 'Erro ao obter localiza√ß√£o';
                
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = 'Permiss√£o de localiza√ß√£o negada. Verifique as configura√ß√µes do navegador.';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = 'Informa√ß√µes de localiza√ß√£o n√£o dispon√≠veis.';
                        break;
                    case error.TIMEOUT:
                        errorMessage = 'Timeout ao obter localiza√ß√£o.';
                        break;
                }
                
                window.agroApp.showToast(errorMessage, 'error');
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 300000 // 5 minutos
            }
        );
    });
    
    // Adicionar o bot√£o ao container de bot√µes de localiza√ß√£o
    const locationButtonsContainer = document.querySelector('.location-buttons');
    if (locationButtonsContainer) {
        locationButtonsContainer.appendChild(getLocationBtn);
    }
}

// Fun√ß√£o para buscar cidade e estado usando geocodifica√ß√£o reversa
async function buscarCidadeEstado(latitude, longitude) {
    try {
        // Usando a API do OpenStreetMap Nominatim (gratuita)
        const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1&accept-language=pt-BR,pt,en`
        );
        
        if (!response.ok) {
            throw new Error('Erro na API de geocodifica√ß√£o');
        }
        
        const data = await response.json();
        
        if (data && data.address) {
            const address = data.address;
            
            // Extrair cidade (pode vir como city, town, village, municipality, etc.)
            const cidade = address.city || 
                          address.town || 
                          address.village || 
                          address.municipality || 
                          address.county ||
                          address.suburb ||
                          '';
            
            // Extrair estado (pode vir como state ou state_district)
            const estado = address.state || address.state_district || '';
            
            // Preencher campos se encontrou informa√ß√µes
            if (cidade) {
                document.getElementById('cidade').value = cidade;
            }
            
            if (estado) {
                // Tentar mapear nome do estado para sigla
                const estadoSigla = mapearEstadoParaSigla(estado);
                if (estadoSigla) {
                    document.getElementById('estado').value = estadoSigla;
                }
            }
            
            console.log('Endere√ßo encontrado:', {
                cidade: cidade,
                estado: estado,
                enderecoCompleto: data.display_name
            });
            
        } else {
            throw new Error('Endere√ßo n√£o encontrado para estas coordenadas');
        }
        
    } catch (error) {
        console.error('Erro ao buscar endere√ßo:', error);
        
        // Tentar API alternativa (ViaCEP com coordenadas aproximadas)
        try {
            await buscarCidadeEstadoAlternativo(latitude, longitude);
        } catch (alternativeError) {
            console.error('Erro na API alternativa:', alternativeError);
            throw new Error('N√£o foi poss√≠vel determinar cidade e estado');
        }
    }
}

// API alternativa usando approximate location
async function buscarCidadeEstadoAlternativo(latitude, longitude) {
    // Para coordenadas no Brasil, podemos usar uma aproxima√ß√£o baseada em regi√µes conhecidas
    const estadosPorRegiao = inferirEstadoPorCoordenadas(latitude, longitude);
    
    if (estadosPorRegiao) {
        document.getElementById('estado').value = estadosPorRegiao.sigla;
        if (estadosPorRegiao.cidadePrincipal) {
            document.getElementById('cidade').value = estadosPorRegiao.cidadePrincipal;
        }
    }
}

// Fun√ß√£o para mapear nome do estado para sigla
function mapearEstadoParaSigla(nomeEstado) {
    const mapeamento = {
        'acre': 'AC',
        'alagoas': 'AL',
        'amap√°': 'AP', 'amapa': 'AP',
        'amazonas': 'AM',
        'bahia': 'BA',
        'cear√°': 'CE', 'ceara': 'CE',
        'distrito federal': 'DF',
        'esp√≠rito santo': 'ES', 'espirito santo': 'ES',
        'goi√°s': 'GO', 'goias': 'GO',
        'maranh√£o': 'MA', 'maranhao': 'MA',
        'mato grosso': 'MT',
        'mato grosso do sul': 'MS',
        'minas gerais': 'MG',
        'par√°': 'PA', 'para': 'PA',
        'para√≠ba': 'PB', 'paraiba': 'PB',
        'paran√°': 'PR', 'parana': 'PR',
        'pernambuco': 'PE',
        'piau√≠': 'PI', 'piaui': 'PI',
        'rio de janeiro': 'RJ',
        'rio grande do norte': 'RN',
        'rio grande do sul': 'RS',
        'rond√¥nia': 'RO', 'rondonia': 'RO',
        'roraima': 'RR',
        'santa catarina': 'SC',
        's√£o paulo': 'SP', 'sao paulo': 'SP',
        'sergipe': 'SE',
        'tocantins': 'TO'
    };
    
    const nomeNormalizado = nomeEstado.toLowerCase().trim();
    return mapeamento[nomeNormalizado] || null;
}

// Fun√ß√£o para inferir estado baseado em coordenadas (aproxima√ß√£o para o Brasil)
function inferirEstadoPorCoordenadas(lat, lng) {
    // Coordenadas aproximadas das regi√µes brasileiras
    const regioes = [
        { sigla: 'AC', nome: 'Acre', lat: [-11, -7], lng: [-74, -66], cidadePrincipal: 'Rio Branco' },
        { sigla: 'AL', nome: 'Alagoas', lat: [-10.5, -8.8], lng: [-38, -35], cidadePrincipal: 'Macei√≥' },
        { sigla: 'AP', nome: 'Amap√°', lat: [4, 1], lng: [-55, -49], cidadePrincipal: 'Macap√°' },
        { sigla: 'AM', nome: 'Amazonas', lat: [-2, 2], lng: [-74, -56], cidadePrincipal: 'Manaus' },
        { sigla: 'BA', nome: 'Bahia', lat: [-18.5, -8.5], lng: [-47, -37], cidadePrincipal: 'Salvador' },
        { sigla: 'CE', nome: 'Cear√°', lat: [-8, -2.5], lng: [-41.5, -37], cidadePrincipal: 'Fortaleza' },
        { sigla: 'DF', nome: 'Distrito Federal', lat: [-16.1, -15.4], lng: [-48.3, -47.2], cidadePrincipal: 'Bras√≠lia' },
        { sigla: 'ES', nome: 'Esp√≠rito Santo', lat: [-21.5, -17.8], lng: [-42, -39.5], cidadePrincipal: 'Vit√≥ria' },
        { sigla: 'GO', nome: 'Goi√°s', lat: [-19.5, -12.3], lng: [-53, -45.9], cidadePrincipal: 'Goi√¢nia' },
        { sigla: 'MA', nome: 'Maranh√£o', lat: [-10.5, -1.5], lng: [-48.5, -41.5], cidadePrincipal: 'S√£o Lu√≠s' },
        { sigla: 'MT', nome: 'Mato Grosso', lat: [-18, -7], lng: [-66, -50], cidadePrincipal: 'Cuiab√°' },
        { sigla: 'MS', nome: 'Mato Grosso do Sul', lat: [-24.5, -17.5], lng: [-58, -50.5], cidadePrincipal: 'Campo Grande' },
        { sigla: 'MG', nome: 'Minas Gerais', lat: [-22.9, -14.2], lng: [-51, -39.8], cidadePrincipal: 'Belo Horizonte' },
        { sigla: 'PA', nome: 'Par√°', lat: [-10, 2.5], lng: [-59, -46], cidadePrincipal: 'Bel√©m' },
        { sigla: 'PB', nome: 'Para√≠ba', lat: [-8.3, -6], lng: [-39, -34.7], cidadePrincipal: 'Jo√£o Pessoa' },
        { sigla: 'PR', nome: 'Paran√°', lat: [-26.8, -22.5], lng: [-55, -48], cidadePrincipal: 'Curitiba' },
        { sigla: 'PE', nome: 'Pernambuco', lat: [-9.5, -7.1], lng: [-41.5, -34.8], cidadePrincipal: 'Recife' },
        { sigla: 'PI', nome: 'Piau√≠', lat: [-10.9, -2.7], lng: [-46, -40.3], cidadePrincipal: 'Teresina' },
        { sigla: 'RJ', nome: 'Rio de Janeiro', lat: [-23.4, -20.7], lng: [-45, -40.9], cidadePrincipal: 'Rio de Janeiro' },
        { sigla: 'RN', nome: 'Rio Grande do Norte', lat: [-6.9, -4.8], lng: [-38.6, -34.9], cidadePrincipal: 'Natal' },
        { sigla: 'RS', nome: 'Rio Grande do Sul', lat: [-33.8, -27], lng: [-58, -49.6], cidadePrincipal: 'Porto Alegre' },
        { sigla: 'RO', nome: 'Rond√¥nia', lat: [-13.7, -7.9], lng: [-66, -60], cidadePrincipal: 'Porto Velho' },
        { sigla: 'RR', nome: 'Roraima', lat: [5.3, -0.02], lng: [-64.8, -58.9], cidadePrincipal: 'Boa Vista' },
        { sigla: 'SC', nome: 'Santa Catarina', lat: [-29.4, -25.9], lng: [-53.8, -48.3], cidadePrincipal: 'Florian√≥polis' },
        { sigla: 'SP', nome: 'S√£o Paulo', lat: [-25.3, -19.8], lng: [-53.1, -44.2], cidadePrincipal: 'S√£o Paulo' },
        { sigla: 'SE', nome: 'Sergipe', lat: [-11.6, -9.5], lng: [-38.6, -36.4], cidadePrincipal: 'Aracaju' },
        { sigla: 'TO', nome: 'Tocantins', lat: [-13.5, -4.9], lng: [-50.7, -45.7], cidadePrincipal: 'Palmas' }
    ];
    
    for (const regiao of regioes) {
        if (lat >= regiao.lat[0] && lat <= regiao.lat[1] && 
            lng >= regiao.lng[0] && lng <= regiao.lng[1]) {
            return regiao;
        }
    }
    
    return null;
}

// Fun√ß√£o para buscar endere√ßo usando coordenadas inseridas manualmente
async function buscarEnderecoPorCoordenadas() {
    const latitude = document.getElementById('latitude').value;
    const longitude = document.getElementById('longitude').value;
    
    if (!latitude || !longitude) {
        if (window.agroApp && window.agroApp.showToast) {
            window.agroApp.showToast('Digite a latitude e longitude primeiro', 'warning');
        } else {
            alert('Digite a latitude e longitude primeiro');
        }
        return;
    }
    
    // Validar se as coordenadas est√£o em formato v√°lido
    const lat = parseFloat(latitude);
    const lng = parseFloat(longitude);
    
    if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {
        if (window.agroApp && window.agroApp.showToast) {
            window.agroApp.showToast('Coordenadas inv√°lidas. Verifique os valores inseridos.', 'error');
        } else {
            alert('Coordenadas inv√°lidas. Verifique os valores inseridos.');
        }
        return;
    }
    
    try {
        if (window.agroApp && window.agroApp.showLoading) {
            window.agroApp.showLoading('Buscando endere√ßo...');
        }
        
        await buscarCidadeEstado(lat, lng);
        
        if (window.agroApp && window.agroApp.hideLoading) {
            window.agroApp.hideLoading();
        }
        
        if (window.agroApp && window.agroApp.showToast) {
            window.agroApp.showToast('Endere√ßo encontrado e preenchido!', 'success');
        } else {
            alert('Endere√ßo encontrado e preenchido!');
        }
        
    } catch (error) {
        if (window.agroApp && window.agroApp.hideLoading) {
            window.agroApp.hideLoading();
        }
        
        console.error('Erro ao buscar endere√ßo:', error);
        
        if (window.agroApp && window.agroApp.showToast) {
            window.agroApp.showToast('N√£o foi poss√≠vel encontrar o endere√ßo para essas coordenadas', 'error');
        } else {
            alert('N√£o foi poss√≠vel encontrar o endere√ßo para essas coordenadas');
        }
    }
}
</script>

<style>
.btn-outline {
    background: transparent;
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    transition: all 0.2s;
}

.btn-outline:hover {
    background: var(--primary-color);
    color: white;
}

.btn-info {
    background: #17a2b8;
    border-color: #17a2b8;
    color: white;
}

.btn-info:hover {
    background: #138496;
    border-color: #117a8b;
}

.form-group .text-muted {
    font-size: 0.875rem;
    line-height: 1.4;
}

.location-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-top: 0.5rem;
}

.location-buttons .btn {
    flex: 1;
    min-width: 200px;
}

@media (max-width: 768px) {
    .location-buttons {
        flex-direction: column;
    }
    
    .location-buttons .btn {
        width: 100%;
    }
}
</style>